plugins {
	id('fabric-loom') version('1.0-SNAPSHOT')
	id('maven-publish')
}

version = project.mod_version as Object
group = project.maven_group as Object

repositories {
	mavenCentral()
	maven { url('https://maven.terraformersmc.com/releases/') }
}

loom {
	accessWidenerPath.set(file('src/main/resources/umu_config.accesswidener'))
}

dependencies {
	minecraft(group: 'com.mojang', name: 'minecraft', version: project.minecraft_version)
	mappings(group: 'net.fabricmc', name: 'yarn', version: project.yarn_mappings, classifier: 'v2')
	modImplementation(group: 'net.fabricmc', name: 'fabric-loader', version: project.loader_version)
	modImplementation(group: 'net.fabricmc.fabric-api', name: 'fabric-api', version: project.fabric_version)
	modCompileOnly(group: 'com.terraformersmc', name: 'modmenu', version: project.modmenu_version) { transitive(false) }
	modRuntimeOnly(group: 'com.terraformersmc', name: 'modmenu', version: project.modmenu_version) { transitive(false) }
}

processResources {
	inputs.property "version", project.version
	filteringCharset "UTF-8"

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"
	if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
		it.options.release = targetJavaVersion
	}
}

java {
	def javaVersion = JavaVersion.toVersion(targetJavaVersion)
	if (JavaVersion.current() < javaVersion) {
		toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
	}
	archivesBaseName = project.archives_base_name
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}" }
	}
}


apply from: "tokens.gradle"

// configure the maven publication
publishing {
	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	publications {
		gpr(MavenPublication) {
			artifactId = "umu-config"
			from components.java
		}
	}

	repositories {
		maven {
			name = "GitHubPackages"
			url = uri("https://maven.pkg.github.com/zemelua/UMU-Config")
			credentials {
				username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
				// password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
				password = "${token}"
			}
		}
	}
}
